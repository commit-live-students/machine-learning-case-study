Failed:


def build():
    creditClf = LogisticRegression(random_state=1)
    creditClf.fit(X=X_train, y=y_train)
    return creditClf

Failed:
def build():
    creditClf = RandomForestClassifier(n_estimators=20, random_state=1)
    creditClf.fit(X=X_train, y=y_train)
    return creditClf

Passed:
def build():
    clf = RandomForestClassifier(random_state=1)

    # specify parameters and distributions to sample from
    param_dist = {"n_estimators": [20, 30, 40, 50, 60, 70, 80],
                  "max_depth": [3, 4, 5, None],
                  "max_features": sp_randint(1, 11),
                  "min_samples_split": sp_randint(2, 11),
                  "min_samples_leaf": sp_randint(1, 11),
                  "bootstrap": [True, False],
                  "criterion": ["gini", "entropy"]}

    # run randomized search
    n_iter_search = 1000
    creditClf = RandomizedSearchCV(clf, param_distributions=param_dist,
                                   n_iter=n_iter_search)
    creditClf.fit(X=X_train, y=y_train)
    return creditClf
